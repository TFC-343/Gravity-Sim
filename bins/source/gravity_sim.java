/* autogenerated by Processing revision 1282 on 2022-05-08 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import fisica.*;
import fisica.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class gravity_sim extends PApplet {



FWorld world;
Entity ent1;
Entity ent2;
Entity ent3;
float G = 50;

float launchX, launchY;
boolean launching = false;
boolean paused = false;

Settings settings;
SavesTab saves;

 public Save toSave(FWorld world){
 Save save = new Save("New Save");
 ArrayList<FCircle> bodies = world.getBodies();
 FCircle b;
 for (int i = 0; i < bodies.size(); i++){
   b = bodies.get(i);
   save.bodies.add(new SaveBody(b.getX(), b.getY(), b.getVelocityX(), b.getVelocityY(), b.getForceX(), b.getForceY(), b.getSize(), b.getDensity())); 
 }
 return save;
}

 public FWorld toWorld(Save save){
  FWorld nWorld = new FWorld();
  nWorld.setGravity(0, 0);
  nWorld.setGrabbable(false);
  ArrayList<SaveBody> bodies = save.bodies;
  SaveBody s;
  for (int i = 0; i < bodies.size(); i++){
   s = bodies.get(i);
   FCircle n = new FCircle(s.size);
   n.setDensity(s.density);
   n.setPosition(s.xPos, s.yPos);
   n.setVelocity(s.xVel, s.yVel);
   n.addForce(s.xF, s.yF);
   nWorld.add(n);
  }
  return nWorld;
  
}

 public float forceTo(FBody a, FBody b){
  return G * a.getMass() * b.getMass() / sqrt(pow(a.getX() - b.getX(), 2) + pow(a.getY() - b.getY(), 2));
}

 public float angleTo(FBody a, FBody b){
  return atan2(b.getY() - a.getY(), b.getX() - a.getX());
}

 public void setup(){
 /* size commented out by preprocessor */;
  
 Fisica.init(this);
 world = new FWorld();
 world.setGravity(0, 0);
 world.setGrabbable(false);
 
 
 settings = new Settings();
 saves = new SavesTab();
 
}

 public void draw(){
 background(100);
 
 if (!paused){ 
   world.step();
   ArrayList<FBody> bodies = world.getBodies();
   for (int i = 0; i < bodies.size(); i++){
     for (int j = 0; j < bodies.size(); j++){
      if (i == j){
       continue; 
      }
      float force, ang;
      force = forceTo(bodies.get(i), bodies.get(j));
      ang = angleTo(bodies.get(i), bodies.get(j));
      bodies.get(i).addForce(force * cos(ang), force * sin(ang));
     }
   }
 }
 
 G = settings.gravity.getVal();
 
 
 world.draw();
 settings.draw();
 saves.draw();
 
 if (launching){
   line(launchX, launchY, mouseX, mouseY);
   fill(255, 255, 255, 200);
   circle(launchX, launchY, settings.size.getVal());
   fill(255);
 }
 
 if (!paused){
  triangle(25, 25, 25, 75, 75, 50); 
 }
 else{
  rect(25, 25, 20, 50); 
  rect(50, 25, 20, 50); 
 }
 
}

 public void mousePressed(){
 if (mouseY > settings.pos || mouseX > saves.pos || settings.open || saves.open){
   return;
 }
 else if(25 < mouseX && mouseX < 75 && 25 < mouseY && mouseY < 75){
   paused = !paused;
   return;
 }
 launching = true;
 launchX = mouseX;
 launchY = mouseY;
}

 public void mouseReleased(){
 if (!launching) { return; } 
 launching = false;
 Entity newEnt = new Entity(launchX, launchY, settings.size.getVal(), settings.density.getVal());
 float force = 5 * sqrt(pow(launchX - mouseX, 2) + pow(launchY - mouseY, 2));
 float ang = atan2(mouseY - launchY, mouseX - launchX);
 // newEnt.body.addForce(force * cos(ang), force * sin(ang));
 newEnt.body.setVelocity(force * cos(ang), force * sin(ang));
 newEnt.addTo(world);
}

 public void keyPressed(){
  if (keyCode == ESC){
   launching = false;
   key = 0;
  }
  else if(key == 'p'){
    paused = !paused;
  }
}

 public void mouseClicked(){
  if (saves.pos + 35 < mouseX && mouseX < saves.pos + 115 && 705 < mouseY && mouseY < 785){
    // Saves the current world to a file
    
    java.awt.FileDialog file = new java.awt.FileDialog((java.awt.Frame) null, "Save File", java.awt.FileDialog.SAVE);
    file.setVisible(true);
    String path = file.getDirectory();
    String name = file.getFile();
    println(path);
    
    if (name != null){
      try{
        File newFile = new File(path + name);
        newFile.createNewFile();
        java.io.FileOutputStream fileOut = new java.io.FileOutputStream(newFile, false);
        java.io.ObjectOutputStream out = new java.io.ObjectOutputStream(fileOut);
        Save s = toSave(world);
        out.writeObject(s);
        out.close();
        fileOut.close();
      }
      catch (IOException i){
       i.printStackTrace(); 
      } 
    }
  }
  else if (saves.pos + 20 + 15 < mouseX && mouseX < saves.pos + 20 + 15 + 80 && 7 * 90 - 15 < mouseY && mouseY < 7 * 90 - 15 + 80){
    java.awt.FileDialog file = new java.awt.FileDialog((java.awt.Frame) null, "Load File", java.awt.FileDialog.LOAD);
    file.setVisible(true);
    String path = file.getDirectory();
    String name = file.getFile();
    println(path);
    
    if (name != null){
      Save s;
      try{
        File newFile = new File(path + name);
        java.io.FileInputStream fileIn = new java.io.FileInputStream(newFile);
        java.io.ObjectInputStream in = new java.io.ObjectInputStream(fileIn);
        s = (Save) in.readObject();
        FWorld n = toWorld(s);
        saves.addWorld(n);
        world = n;
        in.close();
        fileIn.close();
      }
      catch (IOException i){
       i.printStackTrace(); 
      } 
      catch (ClassNotFoundException c){
        c.printStackTrace();
      }
    }
  }


      
 saves.mouseClicked(); 
}


class Entity{
 public FBody body;
 
 public Entity(float x, float y, float size, float density){
  body = new FCircle(size);
  body.setPosition(x, y);
  body.setDensity(density);
  // body.addForce(50, 50);
 }
 
 public void addTo(FWorld theWorld){
  theWorld.add(body); 
 }
 
}
static class Save implements java.io.Serializable{
 String name;
 public ArrayList<SaveBody> bodies;
 public Save(String n){
   name = n;
   bodies = new ArrayList<SaveBody>();
 }
 
 public String getName(){
  return name; 
 }
}
static class SaveBody implements java.io.Serializable{
 public float xPos, yPos;
 public float xVel, yVel;
 public float xF, yF;
 public float size, density;
 public SaveBody(float a, float b, float c, float d, float e, float f, float s, float dens){
   xPos = a;
   yPos = b;
   xVel = c;
   yVel = d;
   xF = e;
   yF = f;
   size = s;
   density = dens;
 }
}
class SavesTab{
  boolean open;
  float pos;
  float openSize, closedSize;
  ArrayList<FWorld> worlds;
  ArrayList<PGraphics> icons;
  int currentWorld;
  public SavesTab(){
    open = false;
    openSize = 670;
    closedSize = 780;
    pos = closedSize;
    worlds = new ArrayList<FWorld>();
    worlds.add(null);
    worlds.add(new FWorld());
    
    icons = new ArrayList<PGraphics>();
    icons.add(null);
    icons.add(createGraphics(800, 800));

    
    currentWorld = 1;
  }
  
  public void draw(){
    if (350 < mouseY && mouseY < 450 && mouseX > closedSize){
      open = true; 
    }
    else if(mouseX < openSize){
      open = false; 
     }
   
    if (open){
      if (pos > openSize){
       pos -= 5; 
      }
     }
     else{
       if (pos < closedSize){
         pos += 5;
        }
      }
      
      rect(pos, 350, 20, 100, 25, 0, 0, 25);
      rect(pos + 20, 0, 400, 800);
      stroke(255);
      line(pos + 20, 350, pos + 20, 450);
      stroke(0);
      
      fill(40);
      
      for (int i = 0; i < worlds.size(); i++){
        float xPos = pos + 20 + 15;
        float yPos = 15 + i * 90;
        int colour = 40;
        int sColour = 255;
        if (i == currentWorld){
          colour = 150;
          sColour = 0;
        }
        else if (xPos < mouseX && mouseX < xPos + 80 && yPos < mouseY && mouseY < yPos + 80){
         colour = 100;
        }
        // rect(xPos, yPos, 80, 80);
        if (i > 0){
          PGraphics icon = createGraphics(800, 800);
          icon.beginDraw();
          icon.background(colour);
          worlds.get(i).draw(icon);
          icon.endDraw();
          PImage img = icon.get();
          img.resize(80, 80);
          image(img, xPos, yPos);
          
          stroke(sColour);
          line(xPos + 65, yPos + 5, xPos + 75, yPos + 15);
          line(xPos + 65, yPos + 15, xPos + 75, yPos + 5);
          stroke(0);
        } else {
          fill(colour);
          rect(pos + 35, 15, 80, 80);
        }
      }
      fill(255);
      rect(pos + 20 + 15 + 30, 15 + 10, 80 - 60, 80 - 20);
      rect(pos + 20 + 15 + 10, 15 + 30, 80 - 20, 80 - 60);
      stroke(255);
      line(pos + 20 + 15 + 30, 15 + 30, pos + 20 + 15 + 30 + 20, 15 + 30);
      line(pos + 20 + 15 + 30, 15 + 30 + 20, pos + 20 + 15 + 30 + 20, 15 + 30 + 20);
      stroke(0);
      
      float xPos = pos + 20 + 15;
      float yPos = 8 * 90 - 15;
      fill(255);
      if (xPos < mouseX && mouseX < xPos + 80 && yPos < mouseY && mouseY < yPos + 80){
        fill(100);
      }
      rect(xPos, yPos, 80, 80);
      // line(pos + 20, yPos - 15, 800, yPos - 15);
      fill(0);
      text("save", xPos + 10, yPos + 50);
      fill(255);
      
      xPos = pos + 20 + 15;
      yPos = 7 * 90 - 15;
      fill(255);
      if (xPos < mouseX && mouseX < xPos + 80 && yPos < mouseY && mouseY < yPos + 80){
        fill(100);
      }
      rect(xPos, yPos, 80, 80);
      line(pos + 20, yPos - 15, 800, yPos - 15);
      fill(0);
      text("load", xPos + 10, yPos + 50);
      fill(255);
    }
    
  public void mouseClicked(){
      if (mouseButton != LEFT){
        return;
      }
      
      for (int i = 0; i < worlds.size(); i++){
        float xPos = pos + 20 + 15;
        float yPos = 15 + i * 90;
        if (xPos < mouseX && mouseX < xPos + 80 && yPos < mouseY && mouseY < yPos + 80){
          worlds.set(currentWorld, world);
         if (i == 0){
           if (worlds.size() <= 5){
             currentWorld = 1;
             FWorld newWorld = new FWorld();
             newWorld.setGravity(0, 0);
             newWorld.setGrabbable(false);
             worlds.add(1, newWorld);
             world = worlds.get(currentWorld);
             icons.add(createGraphics(90, 90));
           }
         }
         else if (xPos + 65 < mouseX && mouseX < xPos + 75 && yPos + 5 < mouseY && mouseY < yPos + 15){
           if (i > 0 && worlds.size() > 2){
             worlds.remove(i);
             icons.remove(i);
             currentWorld = currentWorld - 1;
             if (currentWorld < 1){
               currentWorld = 1;
               world = worlds.get(currentWorld);
             }
             else{
               world = worlds.get(currentWorld);
             }
           }
         }
         else{
           currentWorld = i;
           world = worlds.get(i);
         }
         break;
        }
      }
    }
    
  public void addWorld(FWorld newWorld){
    currentWorld = worlds.size();
    worlds.add(newWorld);
    icons.add(createGraphics(90, 90));
  }
}
class ScrollBar{
  float startVal, endVal, currentVal;
  float defaultVal;
  public float x, y;
  float size;
  boolean grabbed;
  String name;
  public ScrollBar(String n,float a, float b, float s, float v1, float v2, float d){
   x = a;
   y = b;
   size = s;
   startVal = v1;
   endVal = v2;   
   defaultVal = d;
   currentVal = d;
   grabbed = false;
   name = n;
  }
  
  public void draw(){
    
   if (mousePressed){
     // x + size / 2 - 15, y - 10, 20, 20)
     if (x + size / 2 + 15 < mouseX && mouseX < x + size / 2 + 35 && y - 10 < mouseY && mouseY < y + 20){
      currentVal = defaultVal;
     }
     if (sqrt(pow(mouseX - getPos(), 2) + pow(mouseY - y, 2)) < 30){
      grabbed = true;
     }
   }
   else{
    grabbed = false; 
   }
   
   if (grabbed){
     currentVal = startVal + (endVal - startVal) * (mouseX - (x - size / 2))/(size);
     if (currentVal < startVal){
       currentVal = startVal;
     }
     else if (currentVal > endVal){
      currentVal = endVal; 
     }
   }
    
   int oldColour = g.fillColor;
   fill(60);
   rect(x - size / 2, y - 4, size, 8, 5, 5, 5, 5); 
   fill(200);
   circle(getPos(), y, 30);
   fill(0);
   textSize(20);
   text(str(startVal), x - size / 2, y - 10);
   text(str(endVal), x + size / 2 - 30, y - 10);
   text(str(PApplet.parseFloat(round(currentVal * 100)) / 100), x - size / 3, y - 10);
   textSize(30);
   text(name, x - 30, y - 15);
   fill(100);
   rect(x + size / 2 - 10 + 25, y - 10, 20, 20);
   fill(30);
   textSize(25);
   text("R", x + size / 2 - 7 + 25, y + 10);
   
   fill(oldColour);
  }
  
  public float getPos(){
   return (x - size / 2) + size * ((currentVal - startVal)/(endVal - startVal));
  }
  
  public float getVal(){
   return currentVal; 
  }
  
  
}
class Settings{
 boolean open;
 float pos;
 float openSize, closedSize;
 public ScrollBar gravity;
 public ScrollBar size;
 public ScrollBar density;
 public Settings(){
  open = false;
  openSize = 620;
  closedSize = 780;
  
  pos = closedSize;
  
  gravity = new ScrollBar("G", 400, 500, 700, 0, 100, 13.5f);
  size = new ScrollBar("size", 400, 500, 700, 25, 250, 50);
  density = new ScrollBar("density", 400, 500, 700, 5, 1000, 50);
 }
 
 public void draw(){
   if (mouseY > closedSize){
    open = true; 
   }
   else if(mouseY < openSize){
    open = false; 
   }
   
   
   if (open){
    if (pos > openSize){
     pos -= 5; 
    }
   }
   else{
     if (pos < closedSize){
       pos += 5;
     }
   }
   
   gravity.y = pos + 50;
   size.y = pos + 100;
   density.y = pos + 150;
      
   
   rect(0, pos, 800, 400, 25, 25, 0, 0);
   gravity.draw();
   size.draw();
   density.draw();
 }
  
}


  public void settings() { size(800, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "gravity_sim" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
